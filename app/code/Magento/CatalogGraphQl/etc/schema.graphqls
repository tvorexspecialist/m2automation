# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    products(
        search: String,
        filter: ProductFilterInput,
        pageSize: Int,
        currentPage: Int,
        sort: ProductSortInput
     ): Products
     @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\Products")
}

enum CurrencyEnum {
    AFN
    ALL
    AZN
    DZD
    AOA
    ARS
    AMD
    AWG
    AUD
    BSD
    BHD
    BDT
    BBD
    BYR
    BZD
    BMD
    BTN
    BOB
    BAM
    BWP
    BRL
    GBP
    BND
    BGN
    BUK
    BIF
    KHR
    CAD
    CVE
    CZK
    KYD
    GQE
    CLP
    CNY
    COP
    KMF
    CDF
    CRC
    HRK
    CUP
    DKK
    DJF
    DOP
    XCD
    EGP
    SVC
    ERN
    EEK
    ETB
    EUR
    FKP
    FJD
    GMD
    GEK
    GEL
    GHS
    GIP
    GTQ
    GNF
    GYD
    HTG
    HNL
    HKD
    HUF
    ISK
    INR
    IDR
    IRR
    IQD
    ILS
    JMD
    JPY
    JOD
    KZT
    KES
    KWD
    KGS
    LAK
    LVL
    LBP
    LSL
    LRD
    LYD
    LTL
    MOP
    MKD
    MGA
    MWK
    MYR
    MVR
    LSM
    MRO
    MUR
    MXN
    MDL
    MNT
    MAD
    MZN
    MMK
    NAD
    NPR
    ANG
    YTL
    NZD
    NIC
    NGN
    KPW
    NOK
    OMR
    PKR
    PAB
    PGK
    PYG
    PEN
    PHP
    PLN
    QAR
    RHD
    RON
    RUB
    RWF
    SHP
    STD
    SAR
    RSD
    SCR
    SLL
    SGD
    SKK
    SBD
    SOS
    ZAR
    KRW
    LKR
    SDG
    SRD
    SZL
    SEK
    CHF
    SYP
    TWD
    TJS
    TZS
    THB
    TOP
    TTD
    TND
    TMM
    USD
    UGX
    UAH
    AED
    UYU
    UZS
    VUV
    VEB
    VEF
    VND
    CHE
    CHW
    XOF
    WST
    YER
    ZMK
    ZWD
    TRY
    AZM
    ROL
    TRL
    XPF
}

type Price {
    amount: Money @doc(description: "The price of a product plus a three-letter currency code")
    adjustments: [PriceAdjustment] @doc(description: "An array that provides information about tax, weee, or weee_tax adjustments")
}

type PriceAdjustment {
    amount: Money @doc(description: "The amount of the price adjustment and its currency code")
    code: PriceAdjustmentCodesEnum @doc(description: "Indicates whether the adjustment involves tax, weee, or weee_tax")
    description: PriceAdjustmentDescriptionEnum @doc(description: "Indicates whether the entity described by the code attribute is included or excluded from the adjustment")
}

enum PriceAdjustmentCodesEnum {
}

enum PriceAdjustmentDescriptionEnum {
    INCLUDED
    EXCLUDED
}

enum PriceTypeEnum {
    FIXED
    PERCENT
    DYNAMIC
}

type Money {
    value: Float @doc(description: "A number expressing a monetary value")
    currency: CurrencyEnum @doc(description: "A three-letter currency code, such as USD or EUR")
}

type ProductPrices {
    minimalPrice: Price @doc(description: "Used for composite (bundle, configurable, grouped) products. This is the lowest possible final price for all the options defined within a composite product. If you're specifying a price range, this would be the from value.")
    maximalPrice: Price @doc(description: "Used for composite (bundle, configurable, grouped) products. This is the highest possible final price for all the options defined within a composite product. If you're specifying a price range, this would be the to value.")
    regularPrice: Price @doc(description: "The base price of a product.")
}

type ProductCategoryLinks {
    position: Int @doc(description: "The position of the category in the category tree")
    category_id: String @doc(description: "The unique identifier for the category")
}


type ProductLinks implements ProductLinksInterface {
}

interface ProductLinksInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\ProductLinkTypeResolverComposite") {
    sku: String @doc(description: "The identifier of the linked product")
    link_type: String @doc(description: "One of related, associated, upsell, or crosssell")
    linked_product_sku: String @doc(description: "The SKU of the linked product")
    linked_product_type: String @doc(description: "The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable)")
    position: Int @doc(description: "The position within the list of product links")
}

type ProductTierPrices {
    customer_group_id: String @doc(description: "The ID of the customer group")
    qty: Float @doc(description: "The number of items that must be purchased to qualify for tier pricing")
    value: Float @doc(description: "The price of the fixed price item")
    percentage_value: Float @doc(description: "The percentage discount of the item")
    website_id: Float @doc(description: "The ID assigned to the website")
}

interface ProductInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\ProductInterfaceTypeResolverComposite") {
    id: Int @doc(description: "The ID number assigned to the product")
    name: String @doc(description: "The product name. Customers use this name to identify the product.")
    sku: String @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer")
    description: String @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: String @doc(description: "A short description of the product. Its use depends on the theme.")
    special_price: Float @doc(description: "The discounted price of the product")
    special_from_date: String @doc(description: "The beginning date that a product has a special price")
    special_to_date: String @doc(description: "The end date that a product has a special price")
    attribute_set_id: Int @doc(description: "The attribute set assigned to the product")
    meta_title: String @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists")
    meta_keyword: String @doc(description: "A comma-separated list of keywords that are visible only to search engines")
    meta_description: String @doc(description: "A brief overview of the product for search results listings, maximum 255 characters")
    image: String @doc(description: "The relative path to the main image on the product page")
    small_image: String @doc(description: "The relative path to the small image, which is used on catalog pages")
    thumbnail: String @doc(description: "The relative path to the product's thumbnail image")
    new_from_date: String @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product")
    new_to_date: String @doc(description: "The end date for new product listings")
    tier_price: Float @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached")
    custom_design: String @doc(description: "A theme that can be applied to the product page")
    custom_design_from: String @doc(description: "The beginning date when a theme is applied to the product page")
    custom_design_to: String @doc(description: "The date at which a theme is no longer applied to the product page")
    custom_layout_update: String @doc(description: "XML code that is applied as a layout update to the product page")
    custom_layout: String @doc(description: "The name of a custom layout")
    page_layout: String @doc(description: "The page layout of the product page. Values are 1column-center, 2columns-left, 2columns-right, and 3columns")
    category_ids: [Int] @doc(description: "An array of category IDs the product belongs to")
    options_container: String @doc(description: "If the product has multiple options, determines where they appear on the product page")
    image_label: String @doc(description: "The label assigned to a product image")
    small_image_label: String @doc(description: "The label assigned to a product's small image")
    thumbnail_label: String @doc(description: "The label assigned to a product's thumbnail image")
    created_at: String @doc(description: "Timestamp indicating when the product was created")
    updated_at: String @doc(description: "Timestamp indicating when the product was updated")
    country_of_manufacture: String @doc(description: "The product's country of origin")
    type_id: String @doc(description: "One of simple, virtual, bundle, downloadable, grouped, or configurable")
    website_ids: [Int] @doc(description: "An array of website IDs in which the product is available")
    category_links: [ProductCategoryLinks] @doc(description: "An array of ProductCategoryLinks objects")
    product_links: [ProductLinksInterface] @doc(description: "An array of ProductLinks objects")
    media_gallery_entries: [MediaGalleryEntry] @doc(description: "An array of MediaGalleryEntry objects")
    tier_prices: [ProductTierPrices] @doc(description: "An array of ProductTierPrices objects")
    price: ProductPrices @doc(description: "A ProductPrices object, indicating the price of an item")
    gift_message_available: String @doc(description: "Indicates whether a gift message is available")
    manufacturer: Int @doc(description: "A number representing the product's manufacturer")
}

interface PhysicalProductInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\ProductInterfaceTypeResolverComposite") {
    weight: Float @doc(description: "The weight of the item, in units defined by the store")
}


type CustomizableAreaOption implements CustomizableOptionInterface {
    value: CustomizableAreaValue @doc(description: "An object that defines a text area")
    product_sku: String @doc(description: "The Stock Keeping Unit of the base product")
}

type CustomizableAreaValue {
    price: Float @doc(description: "The price assigned to this option")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
    max_characters: Int @doc(description: "The maximum number of characters that can be entered for this customizable option")
}

type CustomizableDateOption implements CustomizableOptionInterface {
    value: CustomizableDateValue @doc(description: "An object that defines a date field in a customizable option.")
    product_sku: String @doc(description: "The Stock Keeping Unit of the base product")
}

type CustomizableDateValue {
    price: Float @doc(description: "The price assigned to this option")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
}

type CustomizableDropDownOption implements CustomizableOptionInterface {
    value: [CustomizableDropDownValue] @doc(description: "An array that defines the set of options for a drop down menu")
}

type CustomizableDropDownValue {
    option_type_id: Int @doc(description: "The ID assigned to the value")
    price: Float @doc(description: "The price assigned to this option")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
    title: String @doc(description: "The display name for this option")
    sort_order: Int @doc(description: "The order in which the option is displayed")
}

type CustomizableFieldOption implements CustomizableOptionInterface {
    value: CustomizableFieldValue @doc(description: "An object that defines a text field")
    product_sku: String @doc(description: "The Stock Keeping Unit of the base product")
}

type CustomizableFieldValue {
    price: Float @doc(description: "The price of the custom value")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
    max_characters: Int @doc(description: "The maximum number of characters that can be entered for this customizable option")
}

type CustomizableFileOption implements CustomizableOptionInterface {
    value: CustomizableFileValue @doc(description: "An object that defines a file value")
    product_sku: String @doc(description: "The Stock Keeping Unit of the base product")
}

type CustomizableFileValue {
    price: Float @doc(description: "The price assigned to this option")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
    file_extension: String @doc(description: "The file extension to accept")
    image_size_x: Int @doc(description: "The maximum width of an image")
    image_size_y: Int @doc(description: "The maximum height of an image")
}

interface CustomizableOptionInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\CustomizableOptionTypeResolver") {
    title: String @doc(description: "The display name for this option")
    required: Boolean @doc(description: "Indicates whether the option is required")
    sort_order: Int @doc(description: "The order in which the option is displayed")
}

interface CustomizableProductInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\ProductInterfaceTypeResolverComposite") {
    options: [CustomizableOptionInterface] @doc(description: "")
}

type CustomizableRadioOption implements CustomizableOptionInterface {
    value: [CustomizableRadioValue] @doc(description: "An array that defines a set of radio buttons")
}

type CustomizableRadioValue {
    option_type_id: Int @doc(description: "The ID assigned to the value")
    price: Float @doc(description: "The price assigned to this option")
    price_type: PriceTypeEnum @doc(description: "FIXED, PERCENT, or DYNAMIC")
    sku: String @doc(description: "The Stock Keeping Unit for this option")
    title: String @doc(description: "The display name for this option")
    sort_order: Int @doc(description: "The order in which the option is displayed")
}

type VirtualProduct implements ProductInterface, CustomizableProductInterface {
}

type SimpleProduct implements ProductInterface, PhysicalProductInterface, CustomizableProductInterface
{
}

type Products {
    items: [ProductInterface] @doc(description: "An array of products that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
    total_count: Int @doc(description: "The number of products returned")
}

input ProductFilterInput {
    name: FilterTypeInput @doc(description: "The product name. Customers use this name to identify the product.")
    sku: FilterTypeInput @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer")
    description: FilterTypeInput @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: FilterTypeInput @doc(description: "A short description of the product. Its use depends on the theme.")
    price: FilterTypeInput @doc(description: "The price of an item")
    special_price: FilterTypeInput @doc(description: "The discounted price of the product")
    special_from_date: FilterTypeInput @doc(description: "The beginning date that a product has a special price")
    special_to_date: FilterTypeInput @doc(description: "The end date that a product has a special price")
    weight: FilterTypeInput @doc(description: "The weight of the item, in units defined by the store")
    manufacturer: FilterTypeInput @doc(description: "A number representing the product's manufacturer")
    meta_title: FilterTypeInput @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists")
    meta_keyword: FilterTypeInput @doc(description: "A comma-separated list of keywords that are visible only to search engines")
    meta_description: FilterTypeInput @doc(description: "A brief overview of the product for search results listings, maximum 255 characters")
    image: FilterTypeInput @doc(description: "The relative path to the main image on the product page")
    small_image: FilterTypeInput @doc(description: "The relative path to the small image, which is used on catalog pages")
    thumbnail: FilterTypeInput @doc(description: "The relative path to the product's thumbnail image")
    tier_price: FilterTypeInput @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached")
    news_from_date: FilterTypeInput @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product")
    news_to_date: FilterTypeInput @doc(description: "The end date for new product listings")
    custom_design: FilterTypeInput @doc(description: "A theme that can be applied to the product page")
    custom_design_from: FilterTypeInput @doc(description: "The beginning date when a theme is applied to the product page")
    custom_design_to: FilterTypeInput @doc(description: "The date at which a theme is no longer applied to the product page")
    custom_layout_update: FilterTypeInput @doc(description: "XML code that is applied as a layout update to the product page")
    page_layout: FilterTypeInput @doc(description: "The page layout of the product page. Values are 1column-center, 2columns-left, 2columns-right, and 3columns")
    category_ids: FilterTypeInput @doc(description: "An array of category IDs the product belongs to")
    options_container: FilterTypeInput @doc(description: "If the product has multiple options, determines where they appear on the product page")
    required_options: FilterTypeInput @doc(description: "Indicates whether the product has required options")
    has_options: FilterTypeInput @doc(description: "Indicates whether additional attributes have been created for the product")
    image_label: FilterTypeInput @doc(description: "The label assigned to a product image")
    small_image_label: FilterTypeInput @doc(description: "The label assigned to a product's small image")
    thumbnail_label: FilterTypeInput @doc(description: "The label assigned to a product's thumbnail image")
    created_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was created")
    updated_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was updated")
    country_of_manufacture: FilterTypeInput @doc(description: "The product's country of origin")
    custom_layout: FilterTypeInput @doc(description: "The name of a custom layout")
    gift_message_available: FilterTypeInput @doc(description: "Indicates whether a gift message is available")
    or: ProductFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

type ProductMediaGalleryEntriesContent {
    base64_encoded_data: String @doc(description: "The image in base64 format")
    type: String @doc(description: "The MIME type of the file, such as image/png")
    name: String @doc(description: "The file name of the image")
}

type ProductMediaGalleryEntriesVideoContent {
    media_type: String @doc(description: "Must be external-video")
    video_provider: String @doc(description: "Describes the video source")
    video_url: String @doc(description: "The URL to the video")
    video_title: String @doc(description: "The title of the video")
    video_description: String @doc(description: "A description of the video")
    video_metadata: String @doc(description: "Optional data about the video")
}

input ProductSortInput {
    name: SortEnum @doc(description: "The product name. Customers use this name to identify the product.")
    sku: SortEnum @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer")
    description: SortEnum @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: SortEnum @doc(description: "A short description of the product. Its use depends on the theme.")
    price: SortEnum @doc(description: "The price of the item")
    special_price: SortEnum @doc(description: "The discounted price of the product")
    special_from_date: SortEnum @doc(description: "The beginning date that a product has a special price")
    special_to_date: SortEnum @doc(description: "The end date that a product has a special price")
    weight: SortEnum @doc(description: "The weight of the item, in units defined by the store")
    manufacturer: SortEnum @doc(description: "A number representing the product's manufacturer")
    meta_title: SortEnum @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists")
    meta_keyword: SortEnum @doc(description: "A comma-separated list of keywords that are visible only to search engines")
    meta_description: SortEnum @doc(description: "A brief overview of the product for search results listings, maximum 255 characters")
    image: SortEnum @doc(description: "The relative path to the main image on the product page")
    small_image: SortEnum @doc(description: "The relative path to the small image, which is used on catalog pages")
    thumbnail: SortEnum @doc(description: "The relative path to the product's thumbnail image")
    tier_price: SortEnum @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached")
    news_from_date: SortEnum @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product")
    news_to_date: SortEnum @doc(description: "The end date for new product listings")
    custom_design: SortEnum @doc(description: "A theme that can be applied to the product page")
    custom_design_from: SortEnum @doc(description: "The beginning date when a theme is applied to the product page")
    custom_design_to: SortEnum @doc(description: "The date at which a theme is no longer applied to the product page")
    custom_layout_update: SortEnum @doc(description: "XML code that is applied as a layout update to the product page")
    page_layout: SortEnum @doc(description: "The page layout of the product page. Values are 1column-center, 2columns-left, 2columns-right, and 3columns")
    category_ids: SortEnum @doc(description: "An array of category IDs the product belongs to")
    options_container: SortEnum @doc(description: "If the product has multiple options, determines where they appear on the product page")
    required_options: SortEnum @doc(description: "Indicates whether the product has required options")
    has_options: SortEnum @doc(description: "Indicates whether additional attributes have been created for the product")
    image_label: SortEnum @doc(description: "The label assigned to a product image")
    small_image_label: SortEnum @doc(description: "The label assigned to a product's small image")
    thumbnail_label: SortEnum @doc(description: "The label assigned to a product's thumbnail image")
    created_at: SortEnum @doc(description: "Timestamp indicating when the product was created")
    updated_at: SortEnum @doc(description: "Timestamp indicating when the product was updated")
    country_of_manufacture: SortEnum @doc(description: "The product's country of origin")
    custom_layout: SortEnum @doc(description: "The name of a custom layout")
    gift_message_available: SortEnum @doc(description: "Indicates whether a gift message is available")
}

type MediaGalleryEntry {
    id: Int @doc(description: "The identifier assigned to the object")
    media_type: String @doc(description: "image or video")
    label: String @doc(description: "The alt text displayed on the UI when the user points to the image")
    position: Int @doc(description: "The media item's position after it has been sorted")
    disabled: Boolean @doc(description: "Whether the image is hidden from vie")
    types: [String] @doc(description: "Array of image types. It can have the following values: image, small_image, thumbnail")
    file: String @doc(description: "The path of the image on the server")
    content: ProductMediaGalleryEntriesContent @doc(description: "Contains a ProductMediaGalleryEntriesContent object")
    video_content: ProductMediaGalleryEntriesVideoContent @doc(description: "Contains a ProductMediaGalleryEntriesVideoContent object")
}
